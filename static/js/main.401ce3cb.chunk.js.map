{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onAddTask","event","keyCode","target","value","tasksAvailable","state","tasksToPerform","push","setState","onMarkAsCompleted","index","map","task","console","log","taskName","updatedTasks","filter","i","className","role","aria-label","type","name","id","placeholder","onKeyUp","this","isCompleted","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAqGeA,G,8DA7Fb,aAAe,IAAD,8BACZ,gBAOFC,UAAY,SAACC,GACX,GAAqB,KAAlBA,EAAMC,SAAwC,MAAtBD,EAAME,OAAOC,MAAe,CACrD,IAAIC,EAAc,YAAO,EAAKC,MAAMC,gBACpCF,EAAeG,KAAK,CAAC,SAAaP,EAAME,OAAOC,MAAO,aAAgB,IACtEH,EAAME,OAAOC,MAAQ,GACrB,EAAKK,SAAS,CACZF,eAAc,YAAOF,OAdb,EAmBdK,kBAAoB,SAACC,GACnB,IAAIN,EAAc,YAAO,EAAKC,MAAMC,gBACpCF,EAAeO,KAAI,SAAAC,GAAI,OAAIC,QAAQC,IAAIF,EAAKG,aAC5C,IAAIC,EAAeZ,EAAea,QAAO,SAACL,EAAMM,GAC9C,OAAOR,GAASQ,KAElBL,QAAQC,IAAIE,GAEZ,EAAKR,SAAS,CACZF,eAAc,YAAOU,MAzBvB,EAAKX,MAAQ,CACXC,eAAiB,IAJP,E,qDAiCJ,IAAD,OACP,OACE,yBAAKa,UAAY,mBAEf,yBAAKA,UAAY,kBAEf,yBAAKA,UAAY,wBAEf,wBAAIA,UAAY,aAAhB,mBAEA,uBAAGA,UAAY,SACb,0BAAMC,KAAO,MAAMC,aAAa,SAAhC,mBASN,yBAAKF,UAAY,iBAEf,yBAAKA,UAAY,wBAEf,yBAAKA,UAAY,cAEf,2BAAOG,KAAO,OAAOH,UAAY,yBAAyBI,KAAO,WAAWC,GAAK,WAAWC,YAAc,qBAAqBC,QAAWC,KAAK5B,eAQrJ,yBAAKoB,UAAY,uBAEf,yBAAKA,UAAY,wBAEf,wBAAIA,UAAY,cAEZQ,KAAKtB,MAAMC,eAAeK,KAAI,SAACC,EAAMF,GACnC,OAAwB,IAArBE,EAAKgB,YACC,wBAAIT,UAAY,2BAA2BU,IAAOnB,GAAlD,IAA4DE,EAAKG,SAAjE,IAA4E,0BAAMI,UAAY,eAAeW,QAAW,kBAAM,EAAKrB,kBAAkBC,KAAzE,WAE5E,gB,GA9ETqB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.401ce3cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      tasksToPerform : []\n    }\n  }\n\n  onAddTask = (event) => {\n    if(event.keyCode === 13 && event.target.value != null) {\n      let tasksAvailable = [...this.state.tasksToPerform];\n      tasksAvailable.push({\"taskName\" : event.target.value, \"isCompleted\" : false});\n      event.target.value = \"\";\n      this.setState({\n        tasksToPerform : [...tasksAvailable]\n      })\n    }\n  }\n\n  onMarkAsCompleted = (index) => {\n    let tasksAvailable = [...this.state.tasksToPerform];\n    tasksAvailable.map(task => console.log(task.taskName));\n    let updatedTasks = tasksAvailable.filter((task, i) => {\n      return index != i;\n    })\n    console.log(updatedTasks);\n\n    this.setState({\n      tasksToPerform : [...updatedTasks]\n    })\n  }\n\n\n  render() {\n    return(\n      <div className = \"container-fluid\">\n\n        <div className = \"row header-row\">\n\n          <div className = \"offset-md-4 col-md-4\">\n\n            <h4 className = \"display-4\"> What to Do..? </h4>\n\n            <p className = \"emoji\">\n              <span role = \"img\" aria-label = \"emoji\">\n              ðŸ¤”\n              </span>\n            </p>\n\n          </div>\n\n        </div>\n\n        <div className = \"row tasks-row\">\n\n          <div className = \"offset-md-4 col-md-4\">\n\n            <div className = \"form-group\">\n\n              <input type = \"text\" className = \"form-control inputTask\" name = \"taskName\" id = \"taskName\" placeholder = \"Type task here..!!\" onKeyUp = {this.onAddTask}/>\n\n            </div>\n\n          </div>\n\n        </div>\n\n        <div className = \"row available-tasks\">\n\n          <div className = \"offset-md-4 col-md-4\">\n\n            <ul className = \"list-group\">\n              {\n                this.state.tasksToPerform.map((task, index) => {\n                  if(task.isCompleted === false) {\n                    return <li className = \"list-group-item clearfix\" key = {index}> { task.taskName } <span className = \"close-button\" onClick = {() => this.onMarkAsCompleted(index)}>&#x274C;</span></li>\n                  } else {\n                    return null;\n                  }\n                })\n              }\n            </ul>\n\n          </div>\n\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}